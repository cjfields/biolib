= Bio++ =

Notes on compiling the Bio++ modules in the Biolib framework.

== Pull my updates ==

Maybe create a new branch first

git checkout -b testbranch
git remote add pjotr git://github.com/pjotrp/biolib.git
git pull pjotr biopp 
gitk (study changes and the log)

if you like it:

git checkout biopp (your working branch)
git merge testbranch

etc.

== Check-out the biopp git submodule ==

The submodules are defined in ./.gitmodules. There should be an entry
like:

  [submodule "contrib/biopp"]
        path = contrib/biopp
        url = git://github.com/pjotrp/biopp.git

and another for the cmake modules:

  [submodule "tools/cmake-support"]
        path = tools/cmake-support
        url = git://github.com/pjotrp/cmake-support.git

In the root do:

  git submodule init
  git submodule update

And the biopp sub-repository should be in ./contrib/biopp


== Building the C++ libraries ==

The control files for building the Bio++ C libraries are in
./src/clibs/biopp/

  cd ./src/clibs/biopp/src/
  rm CMakeCache.txt ; cmake . ; make 
 
should build a shared library in ./src/clibs/biopp/build. This is the
library we link against. (Note: As Bio++ has namespaces we can build one
single .so file). It is named something like
libbiolib_biopp-0.0.5.so, where the version number reflects the
biolib repository VERSION.


== Creating Python bindings ==

The Python mapping happens in ./src/mappings/swig/python/biopp. Key
is the python_biopp.i file, which includes all the others.

== Mapping BppString.h ==

First we map BppString.h. Adding

  SET (USE_SWIG_INCLUDEPATH "${MAP_ROOT}/contrib/biopp/utils/Utils")

makes sure SWIG finds all the include files. Running

  rm CMakeCache.txt ; cmake . ; make

generates a list of warnings and errors. The first warnings fail to
find the STL:

../../../../../contrib/biopp/utils/Utils/BppString.h:57: Warning(401): Nothing known about base class 'string'. Ignored.

which may, or may not, be harmless. The error:

/home/wrk/izip/git/opensource/biolib/src/mappings/swig/python/biopp/python_bioppPYTHON_wrap.cxx:2677: error: 'bpp' has not been declared

points to a namespace problem. As well as the others when you check
the generated python_bioppPYTHON_wrap.cxx file. Apparently the
namespace gets generated by SWIG.

To move on I simplyfied python_biopp.i to only include BppString.i -
and changed that in turn just to include the Bio++ BppString.h file. Again:

  rm CMakeCache.txt ; cmake . ; make

This resulted in:

/home/wrk/izip/git/opensource/biolib/src/mappings/swig/python/biopp/../../../../../contrib/biopp/utils/Utils/BppString.h:56: error: expected class-name before ',' token

it appears to have trouble with the std::string definition.

After some trials I have a .i file looking like:

  %{
    /* The following sections ends in the .cxx file */
    using namespace std;   /* Make sure the STL is used */
    #include <Clonable.h>
    #include <BppString.h>
  %}

  /* Below the actual SWIG inputs */
  /* Use STL definitions of swig in /usr/share/swig */
  %include std_string.i
  using namespace std;
  %include <BppString.h>

And set SWIG to parse the include files in:

SET (USE_SWIG_INCLUDEPATH "${MAP_ROOT}/contrib/biopp/utils/Utils;-I/usr/include/
c++/4.3;-I/usr/include/c++/4.3/i486-linux-gnu;-I/usr/include;-I/usr/include/linu
x")

using

SET(USE_SWIG_INCLUDEALL TRUE)

Now a lot is parsed. However there are two remaining problems. First,
above include paths are hard coded (Pjotr fix), second the C++
#include_next directive is giving problems with SWIG. Resulting in
the following error:

  /usr/include/c++/4.3/cstddef:48: Error: Unable to find '_next'

I think we need to work around this.

