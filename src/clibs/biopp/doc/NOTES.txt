= Bio++ =

Notes on compiling the Bio++ modules in the Biolib framework.


== Check-out the biopp git submodule ==

The submodules are defined in ./.gitmodules. There should be an entry
like:

  [submodule "contrib/biopp"]
        path = contrib/biopp
        url = git://github.com/pjotrp/biopp.git

and another for the cmake modules:

  [submodule "tools/cmake-support"]
        path = tools/cmake-support
        url = git://github.com/pjotrp/cmake-support.git

In the root do:

  git submodule init
  git submodule update

And the biopp sub-repository should be in ./contrib/biopp


== Building the C++ libraries ==

The control files for building the Bio++ C libraries are in
./src/clibs/biopp/

  cd ./src/clibs/biopp/src/
  rm CMakeCache.txt ; cmake . ; make 
 
should build a shared library in ./src/clibs/biopp/build. This is the
library we link against. (Note: As Bio++ has namespaces we can build one
single .so file). It is named something like
libbiolib_biopp-0.0.5.so, where the version number reflects the
biolib repository VERSION.


== Creating Python bindings ==

The Python mapping happens in ./src/mappings/swig/python/biopp. Key
is the python_biopp.i file, which includes all the others.

== Mapping BppString.h ==

First we map BppString.h. Adding

  SET (USE_SWIG_INCLUDEPATH "${MAP_ROOT}/contrib/biopp/utils/Utils")

makes sure SWIG finds all the include files. Running

  rm CMakeCache.txt ; cmake . ; make

generates a list of warnings and errors. The first warnings fail to
find the STL:

../../../../../contrib/biopp/utils/Utils/BppString.h:57: Warning(401): Nothing known about base class 'string'. Ignored.

which may, or may not, be harmless. The error:

/home/wrk/izip/git/opensource/biolib/src/mappings/swig/python/biopp/python_bioppPYTHON_wrap.cxx:2677: error: 'bpp' has not been declared

points to a namespace problem. As well as the others when you check
the generated python_bioppPYTHON_wrap.cxx file. Apparently the
namespace gets generated by SWIG.


